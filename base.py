# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 16:05:02 2025

@author: shubh
"""

# -*- coding: utf-8 -*-
"""MedInsurance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a6ASw63Z7YKIzXZeIKsjwSxwWHFV1VIt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly 
import plotly.express as ex
import seaborn as sns
from plotly.io import templates
from sklearn.preprocessing import StandardScaler
from scipy.stats import norm
from sklearn.preprocessing import LabelEncoder

Expenditure = pd.read_csv("D:\\MedInsurance\\insurance.csv")

print(Expenditure.head())

print(Expenditure.isnull().sum())

df=Expenditure

"""## **EDA**"""



#Change categorical value into int
df['smoker']=Expenditure.smoker.map(dict(yes=1, no=0))
df['sex']=Expenditure.sex.map(dict(male=1, female=0))

plt.figure(figsize=(10,5))
sns.heatmap(df.corr(), vmin=-1, cmap="YlGnBu_r", annot=True)

Children=Expenditure.children.value_counts().rename_axis('NumberofChildren').reset_index(name='count')

plt.figure(figsize=(10,10))
colors = ['#FFF8DC', '#9BCD9B', '#66CDAA', '#20B2AA',"#009ACD","#104E8B"]

plt.pie(Children["count"].tolist(), labels=Children["NumberofChildren"].tolist(), labeldistance=1.15, wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' }, colors=colors,
       autopct='%1.1f%%',shadow=True);
plt.title("Number of Children")

region=Expenditure.region.value_counts().rename_axis('region').reset_index(name='count')

plt.figure(figsize=(10,10))
colors = ['#FFF8DC', '#9BCD9B', '#66CDAA', '#20B2AA']

plt.pie(region["count"].tolist(), labels=region["region"].tolist(), labeldistance=1.15, wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' }, colors=colors,
       autopct='%1.1f%%', shadow=True);
plt.title("Region Distribution")

plt.figure(figsize=(12,10))
sns.set(style="darkgrid")
sns.distplot(Expenditure.bmi, kde = True, color='#0000FF', kde_kws={'color':'black'})
plt.show()

plt.figure(figsize=(12,10))
sns.set(style="darkgrid")
sns.distplot(Expenditure.bmi, kde = True)
plt.show()

plt.figure(figsize=(8,5))
sns.countplot(x='smoker', data = Expenditure, palette='GnBu', saturation=0.8)

plt.figure(figsize=(8,5))
sns.countplot(x='sex', data = Expenditure, palette='GnBu', saturation=0.8)

plt.figure(figsize=(12,10))
sns.set(style="darkgrid")
sns.distplot(Expenditure.charges, kde = True, color='#0000FF', kde_kws={'color':'black'})
plt.show()

"""Data is highly right skewed.

 We transform data to make it normal
"""

plt.figure(figsize=(10,6))
sns.histplot(np.log(Expenditure['charges']),kde=True,bins=10)
plt.title('Charges')
plt.show()

"""Performing log transformation we get almost normal."""

Expenditure['charges'] = Expenditure['charges'].apply(np.log)

sns.set(style="darkgrid")
f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={"height_ratios": (.15, .85)})
sns.boxplot(data=Expenditure,x='charges', ax=ax_box)
sns.histplot(data=Expenditure, x="charges", ax=ax_hist,kde=True)
ax_box.set(xlabel='')
plt.show()

"""Bivariate Analysis"""

plt.figure(figsize=(10,6))
sns.scatterplot(y='bmi',x='charges',data=Expenditure)
plt.title('Charges v/s BMI')
plt.show()

"""Higher BMI have higher Charges"""

plt.figure(figsize=(10,6))
sns.boxplot(x='smoker',y='bmi',data=Expenditure)
plt.title('Smoker v/s BMI')
plt.show()

"""Average BMI is slightly more for smokers than non-smokers"""

sns.heatmap(Expenditure.corr(),annot=True)
plt.show()

"""Highest Correlation between Smoker and Charges

MODEL BUILDING
"""

#dummies = pd.get_dummies(df.region)

#df_new = pd.concat([df.drop('region',axis='columns'),dummies],axis='columns')

x=df.drop(columns=["charges","region"])
y=df.charges

##FEATURE IMPORTANCE

#from sklearn.ensemble import ExtraTreesRegressor
#model=ExtraTreesRegressor()
#model.fit(x,y)

#print(model.feature_importances_)

#plotting Graph
#import matplotlib.pyplot as plt
#feat_import=pd.Series(model.feature_importances_,index=x.columns)
#feat_import.nlargest(5).plot(kind='barh')
#plt.show()


from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.linear_model import LinearRegression
LR = LinearRegression()
LR.fit(x_train,y_train)
print(LR.score(x_test,y_test))

predictions=LR.predict(x_test)

#sns.distplot(y_test-predictions)

"""We got a Normal Curve Which Indicates our model fits well"""

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)

cross_val_score(LinearRegression(), x, y, cv=cv)

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(min_samples_split=2,random_state=0) 
regressor.fit(x_train,y_train)
regressor.score(x_test,y_test)

"""making a prediction"""

import math
def predict_charges(region,age,sex,bmi,children,smoker):    
   
    a = np.zeros(len(x.columns))
    a[0] = age
    a[1] = sex
    a[2] = bmi
    a[3] = children
    a[4] = smoker
   
        
    
    
    return math.exp(LR.predict([a])[0])


predict_charges('northwest','58','1','36.955','2','1')
"""We had to take Exponent because Earlier we had applied logarthmic Function on the column "Charges" """




"""Exporting Our Model"""

import pickle
pickle.dump(LR, open('D:/MedInsurance/models/LReg.pkl', 'wb'))

#databse


import sqlite3

def init_db():
    conn = sqlite3.connect('insurance_predictions.db')  # Connect to the SQLite database (it will create the file if it doesn't exist)
    cursor = conn.cursor()

    # Create a table for storing predictions
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            age INTEGER,
            sex INTEGER,
            bmi REAL,
            children INTEGER,
            smoker INTEGER,
            prediction REAL
        )
    ''')
    conn.commit()
    conn.close()

# Call this function to initialize the database when the app starts
init_db()



